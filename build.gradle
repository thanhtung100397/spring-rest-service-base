buildscript {
    ext {
        springBootVersion = '2.6.4'
        gradleDockerPluginVersion = '0.20.0'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:${gradleDockerPluginVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

group = 'com.spring'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

springBoot {
    buildInfo()
}

docker {
    dependsOn build
    name "${bootJar.baseName}:latest"
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.apache.httpcomponents:httpclient:4.5.2')

    // [swagger] Swagger doc api
    implementation('io.springfox:springfox-swagger2:2.7.0')
    implementation('io.springfox:springfox-swagger-ui:2.7.0')

    // [auth] OAuth2 + JWT for Authentication and Authorization
    implementation('org.springframework.boot:spring-boot-starter-security')
    testImplementation('org.springframework.security:spring-security-test')
    implementation('org.springframework.security.oauth:spring-security-oauth2:2.0.8.RELEASE')
    implementation('org.springframework.security:spring-security-jwt:1.0.0.RELEASE')
    implementation('io.jsonwebtoken:jjwt:0.9.0')

    // [firebase] Firebase
    implementation ('com.google.api-client:google-api-client:1.23.0')
    implementation ('com.google.firebase:firebase-admin:5.11.0')
    implementation('com.google.guava:guava:20.0')

    // Lombok
    implementation('org.projectlombok:lombok:1.16.18')
    annotationProcessor('org.projectlombok:lombok:1.16.18')

    // Mapstruct
    implementation('org.mapstruct:mapstruct:1.4.2.Final')
    compileOnly('org.mapstruct:mapstruct-processor:1.4.2.Final')
    annotationProcessor('org.mapstruct:mapstruct-processor:1.4.2.Final')
    testAnnotationProcessor('org.mapstruct:mapstruct-processor:1.4.2.Final')

    // Apache POI - .xlsx reader and generator
    //implementation('org.apache.poi:poi-ooxml:3.17')
    //implementation('org.apache.poi:poi:3.17')

    // IText (.pdf generator) + Thymeleaf (.html binding)
    //implementation('com.itextpdf:itextpdf:5.5.13')
    //implementation('com.itextpdf.tool:xmlworker:5.5.13')
    //implementation('org.apache.pdfbox:pdfbox:2.0.13')
    //implementation('org.springframework.boot:spring-boot-starter-thymeleaf')

    // [jpa] Spring Data JPA - Connect SQL DBMS
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('mysql:mysql-connector-java:8.0.28')
}
